@using ConfiguratorWeb.App.Controllers
@{
   string gridName = "Jobs";
   string popUpWindowName = "JobDetail";
}
<script>
    var gridIdName = "@gridName";
    var popUpWindowName = "#@popUpWindowName";

   function setTriggerCell(data) {
      //debugger;
      var template = "<span>";
      if (data.exj_TriggerIsScheduled) {
         template += "<i class='mdi mdi-24px mdi-clock-alert-outline' title='@DicSvc.XLateHtml("Scheduled"): " + data.exj_TriggerScheduledCron+"'></i>";
      }
      if (data.exj_TriggerIsOnMessage) {
         template += "<i class='mdi mdi-24px mdi-message-text-clock-outline' title='@DicSvc.XLateHtml("Message"): " + data.exj_TriggerMessage +"'></i>";
      }
      template += "</span>";
      return template;
   }
   function setActionCell(data) {
      //debugger;
      var template = "<span>";
      if (data.exj_SaveOnFileSystem) {
         template += "<i class='mdi mdi-24px mdi-content-save-outline' title='@DicSvc.XLateHtml("save on file system")'></i>";
      }
      if (data.exj_SendMail) {
         template += "<i class='mdi mdi-24px mdi-email-outline' title='@DicSvc.XLateHtml("send mail")'></i>";
      }
      template += "</span>";
      return template;
   }
   function setStatusCell(status) {
      //debugger;
      var template = '<span>';
      if (status == 1) {
         template += "<i class='mdi mdi-24px mdi-checkbox-marked-outline' ></i>";
      }else {
         template += "<i class='mdi mdi-24px mdi-checkbox-blank-outline' ></i>";
      }
      template += "</span>";
      return template;
   }
   function setLastStatusCell(data) {
      //debugger;
      var status = parseInt(data.exj_LastRunStatusCode ).toString();
      var title = data.LastRunStatusDescription ;
      var template = '<span class="ums-grid-tooltip" data-title="' + title +  '">';
      template += "<i class='mdi mdi-24px mdi";
      switch (status) {
      case "-1":
            template += "-alert text-danger'";// title='@DicSvc.XLateJs("Not runnable")'";
         break;
      case "0":
            template += "-alpha-n-circle-outline'";// title='@DicSvc.XLateJs("Undefined")'";
         break;
      case "1":
            template += "-run-fast'";// title='@DicSvc.XLateJs("Running ")'";
         break;
      case "2":
            template += "-alert-circle-outline text-success'";// title='@DicSvc.XLateJs("Completed with error")'";
         break;
      case "3":
            template += "-close-circle-outline text-danger'";// title='@DicSvc.XLateJs("Can not generate")'";
         break;
      case "4":
            //template += "-clock-out text-warning' title='@DicSvc.XLateJs("Skipped")'";
            template += "-alarm-snooze text-info'";// title='@DicSvc.XLateJs("Skipped")'";
         break;
      case "5":
            //template += "-shield-half-full text-success mdi-flip-h' title='@DicSvc.XLateJs("Completed with error step 1")'";
            template += "-circle-slice-4 text-success mdi-flip-h'";// title='@DicSvc.XLateJs("Completed with error step 1")'";
         break;
      case "6":
            //template += "-shield-half-full text-success' title='@DicSvc.XLateJs("Completed with error step 2")'";
            template += "-circle-slice-4 text-success'";// title='@DicSvc.XLateJs("Completed with error step 2")'";
         break;
      case "7":
            template += "-timer-sand text-danger'";// title='@DicSvc.XLateJs("Stopped by Request")'";
         break;
      case "10":
            template += "-check-circle text-success'";// title='@DicSvc.XLateJs("Completed all ok")'";
         break;
      @*case "1":
         template += '@DicSvc.XLateJs("Running")';
         break;*@
      default:
            template += "-'";
            if (data.exj_LastRunStatusCode != null) {
               template += ">" + '@DicSvc.XLateJs("undefined code:")' + status + "<br/";
            } 

         break;
      }

      template += "></i></span>";
      return template;
   }
</script>

<div class="card h-100 mt-1 mx-1 px-2 border-0" id="gridContainer">
   <div id="@popUpWindowName"></div>
   @(Html.Kendo().Grid<Digistat.FrameworkStd.Model.Export.ExportJobs>
      ()
      .Name(gridName)
      .UmsDefaultSettings(DicSvc)
      .UmsDefaultToolbar("createNewItem", "Add new", "displayItemDetail('');", DicSvc)
      //Uncomment for use Pager
      .UmsDefaultPager(DicSvc)
      .Events(ev => ev.DataBound("onDataBound"))
      .Columns(columns =>
      {
         columns.Bound(e => e.exj_ID).Visible(false);
         columns.Bound(e => e.exj_Host).Title(DicSvc.XLate("Host"));
         columns.Bound(e => e.exj_Name).Title(DicSvc.XLate("Name"));
         columns.Bound(e => e.exj_ReportMasterTemplate).Title(DicSvc.XLate("Template"));
         columns.Bound(e => e.exj_TriggerIsScheduled).Title(DicSvc.XLate("Trigger")).ClientTemplate("#=setTriggerCell(data)#")
            .HtmlAttributes(new {style= "text-align: center;" }).Filterable(false).Width(120);
         columns.Bound("").Title(DicSvc.XLate("Actions")).ClientTemplate("#=setActionCell(data)#")
            .HtmlAttributes(new {style= "text-align: center;" }).Filterable(false).Width(120);
         columns.Bound(e => e.exj_Status).Title(DicSvc.XLate("Status")).Filterable(false).ClientTemplate("#=setStatusCell(exj_Status)#")
            .HtmlAttributes(new { style = "text-align: center;" }).Width(120);
         columns.Bound(e => e.exj_LastRunDateTime).Title(DicSvc.XLate("Last Execution Date/Time")).Format("{0:dd/MM/yyyy HH:mm}");
         columns.Bound(e => e.exj_LastRunStatusCode).Title(DicSvc.XLate("Last Execution Status")).Filterable(false).ClientTemplate("#=setLastStatusCell(data)#");
      })

      .DataSource(dataSource => dataSource
         .Ajax()
         .Events(events => events.Error("error_handler_users"))
         .Read(read => read.Action("ReadJobs","ExportScheduler"))
      ))
</div>

<script type="text/javascript">

    @{
       string editItemTitle = DicSvc.XLate("Edit Job");
       string newItemTitle = DicSvc.XLate("New Job");
    }
    var kndWnd;
    $(document).ready(function() {
        if (!kndWnd) {
            kndWnd = $(popUpWindowName).usmKendoWindow({
                maxHeight:600,
                title: '@DicSvc.XLate(editItemTitle)',
                close: function (e) {
                    $('#' + gridIdName).data("kendoGrid").table.focus();
                }
            });

        }
        

    });


    $(window).resize(function () {
        setTimeout(function () {
            var kendoWindow = $("[data-role='window']");
            if (kendoWindow.length) {
                for (var i = 0; i < kendoWindow.length; i++) {
                    var win = $(kendoWindow[i]).data("kendoWindow");
                    if (!win.element.is(":hidden")) {
                        win.center();
                        if (win.resize != undefined) {
                            win.trigger('resize');
                        }

                    }
                }
            }
        }, 100);
    });

    function displayItemDetail(item) {
        var windowWidget = $(popUpWindowName).data("kendoWindow");
        kendo.ui.progress(windowWidget.element, true);
        $.ajax({
            url: '@Url.Action("JobDetail", "ExportScheduler")',
            type: 'GET',
           data: { id: item.exj_ID }
        }).done(function (dataHtml) {
            kendo.ui.progress(windowWidget.element, true);
			   var dialog = $(popUpWindowName ).data('kendoWindow');
            if (item === '') {
                dialog.title('@DicSvc.XLate(newItemTitle)');
            } else {
              dialog.title('@DicSvc.XLate(editItemTitle) :' + item.exj_Name );
            }
            dialog.content(dataHtml).center().open();

        });
    }
    //
    function onDataBound(e) {
        var grid = this;
        grid.element.off('dblclick').on('dblclick', 'tbody tr[data-uid]',
            function (e) {
                var item = grid.dataItem( $(e.target).closest('tr'));
                onGridKeyEnter(item);
            });
        if ($("#@gridName").data("kendoTooltip") == undefined) {
           setGridKendoTooltip('#@gridName');
           $("#@gridName").data("kendoTooltip").refresh();
        }
    }
    function setGridKendoTooltip(divName) {
       $(divName).kendoTooltip({
          filter: "td,th>a,td>span",
          show: function(e) {
             if (this.content.text() != "") {
                $('[role="tooltip"]').css("visibility", "visible");
             }
          },
          hide: function() {
             $('[role="tooltip"]').css("visibility", "hidden");
          },
          content: function(e) {
             
             function extractContent(e)
             {
                var element = e.target[0];
                //debugger;
                if (element.localName=="span") {
             
                   if (element.classList.contains('ums-grid-tooltip')) {
                      //debugger;
                      if (element.dataset.title) {
                         return element.dataset.title;
                      }
                      //var txt = element["data-title"];
                   }
                }
                if (element.offsetWidth < element.scrollWidth) {
                   return e.target.text();
                } else {
                   return "";
                }
             }
             return extractContent(e).replaceAll("<","&#60;").replaceAll("<","&#62;")
          }
       });

    }
    function onGridKeyEnter(item) {
        //replace Key
        displayItemDetail(item);
    };


    function error_handler_users(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

</script>