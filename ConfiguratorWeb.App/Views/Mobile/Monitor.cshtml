
@using Digistat.FrameworkStd.Model.Mobile
@{
    ViewBag.Title = DicSvc.XLate("Monitor Mobile");
}


<script>

  

    var kndWndConfigDialog;
    $(document).ready(function () {
        //if (!kndWndConfigDialog) {
            kndWndConfigDialog = $('#deviceConfigDialog').usmKendoWindow({
                //close: function (e) {
                //    //$('#' + gridIdName).data("kendoGrid").table.focus();
                //},
                title: '@DicSvc.XLate("Device Configuration")',
                height: '290px',
                width:'700px'
            });
     //   }
     });

    var kndWndSendMessageDialog;
    $(document).ready(function () {
        //if (!kndWndSendMessageDialog) {
            kndWndSendMessageDialog = $('#deviceSendMessage').usmKendoWindow({
                //close: function (e) {
                //    //$('#' + gridIdName).data("kendoGrid").table.focus();
                //},
                title: '@DicSvc.XLate("Send Message to Device")',
                height: '290px',
                width:'700px'
            });
        //}
    });

        function showDeviceConfigDialog(title) {
            $('#deviceConfigDialog').data('kendoWindow').title(title);
            $('#deviceConfigDialog').data('kendoWindow').center();
            $('#deviceConfigDialog').data('kendoWindow').open();
        }


        function closeDeviceConfigDialog() {
            $('#deviceConfigDialog').data('kendoWindow').close();
        }


        function showSendMessageDialog(title) {
            $('#deviceSendMessage').data('kendoWindow').title(title);
            $('#deviceSendMessage').data('kendoWindow').center();
            $('#deviceSendMessage').data('kendoWindow').open();
        }


        function closeSendMessageDialog() {
            $('#deviceSendMessage').data('kendoWindow').close();
        }

(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory(global):typeof define==="function"&&define.amd?define(factory):factory(global)})(typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:this,function(global){"use strict";var _Base64=global.Base64;var version="2.5.0";var buffer;if(typeof module!=="undefined"&&module.exports){try{buffer=eval("require('buffer').Buffer")}catch(err){buffer=undefined}}var b64chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64tab=function(bin){var t={};for(var i=0,l=bin.length;i<l;i++)t[bin.charAt(i)]=i;return t}(b64chars);var fromCharCode=String.fromCharCode;var cb_utob=function(c){if(c.length<2){var cc=c.charCodeAt(0);return cc<128?c:cc<2048?fromCharCode(192|cc>>>6)+fromCharCode(128|cc&63):fromCharCode(224|cc>>>12&15)+fromCharCode(128|cc>>>6&63)+fromCharCode(128|cc&63)}else{var cc=65536+(c.charCodeAt(0)-55296)*1024+(c.charCodeAt(1)-56320);return fromCharCode(240|cc>>>18&7)+fromCharCode(128|cc>>>12&63)+fromCharCode(128|cc>>>6&63)+fromCharCode(128|cc&63)}};var re_utob=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;var utob=function(u){return u.replace(re_utob,cb_utob)};var cb_encode=function(ccc){var padlen=[0,2,1][ccc.length%3],ord=ccc.charCodeAt(0)<<16|(ccc.length>1?ccc.charCodeAt(1):0)<<8|(ccc.length>2?ccc.charCodeAt(2):0),chars=[b64chars.charAt(ord>>>18),b64chars.charAt(ord>>>12&63),padlen>=2?"=":b64chars.charAt(ord>>>6&63),padlen>=1?"=":b64chars.charAt(ord&63)];return chars.join("")};var btoa=global.btoa?function(b){return global.btoa(b)}:function(b){return b.replace(/[\s\S]{1,3}/g,cb_encode)};var _encode=buffer?buffer.from&&Uint8Array&&buffer.from!==Uint8Array.from?function(u){return(u.constructor===buffer.constructor?u:buffer.from(u)).toString("base64")}:function(u){return(u.constructor===buffer.constructor?u:new buffer(u)).toString("base64")}:function(u){return btoa(utob(u))};var encode=function(u,urisafe){return!urisafe?_encode(String(u)):_encode(String(u)).replace(/[+\/]/g,function(m0){return m0=="+"?"-":"_"}).replace(/=/g,"")};var encodeURI=function(u){return encode(u,true)};var re_btou=new RegExp(["[À-ß][-¿]","[à-ï][-¿]{2}","[ð-÷][-¿]{3}"].join("|"),"g");var cb_btou=function(cccc){switch(cccc.length){case 4:var cp=(7&cccc.charCodeAt(0))<<18|(63&cccc.charCodeAt(1))<<12|(63&cccc.charCodeAt(2))<<6|63&cccc.charCodeAt(3),offset=cp-65536;return fromCharCode((offset>>>10)+55296)+fromCharCode((offset&1023)+56320);case 3:return fromCharCode((15&cccc.charCodeAt(0))<<12|(63&cccc.charCodeAt(1))<<6|63&cccc.charCodeAt(2));default:return fromCharCode((31&cccc.charCodeAt(0))<<6|63&cccc.charCodeAt(1))}};var btou=function(b){return b.replace(re_btou,cb_btou)};var cb_decode=function(cccc){var len=cccc.length,padlen=len%4,n=(len>0?b64tab[cccc.charAt(0)]<<18:0)|(len>1?b64tab[cccc.charAt(1)]<<12:0)|(len>2?b64tab[cccc.charAt(2)]<<6:0)|(len>3?b64tab[cccc.charAt(3)]:0),chars=[fromCharCode(n>>>16),fromCharCode(n>>>8&255),fromCharCode(n&255)];chars.length-=[0,0,2,1][padlen];return chars.join("")};var _atob=global.atob?function(a){return global.atob(a)}:function(a){return a.replace(/\S{1,4}/g,cb_decode)};var atob=function(a){return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g,""))};var _decode=buffer?buffer.from&&Uint8Array&&buffer.from!==Uint8Array.from?function(a){return(a.constructor===buffer.constructor?a:buffer.from(a,"base64")).toString()}:function(a){return(a.constructor===buffer.constructor?a:new buffer(a,"base64")).toString()}:function(a){return btou(_atob(a))};var decode=function(a){return _decode(String(a).replace(/[-_]/g,function(m0){return m0=="-"?"+":"/"}).replace(/[^A-Za-z0-9\+\/]/g,""))};var noConflict=function(){var Base64=global.Base64;global.Base64=_Base64;return Base64};global.Base64={VERSION:version,atob:atob,btoa:btoa,fromBase64:decode,toBase64:encode,utob:utob,encode:encode,encodeURI:encodeURI,btou:btou,decode:decode,noConflict:noConflict,__buffer__:buffer};if(typeof Object.defineProperty==="function"){var noEnum=function(v){return{value:v,enumerable:false,writable:true,configurable:true}};global.Base64.extendString=function(){Object.defineProperty(String.prototype,"fromBase64",noEnum(function(){return decode(this)}));Object.defineProperty(String.prototype,"toBase64",noEnum(function(urisafe){return encode(this,urisafe)}));Object.defineProperty(String.prototype,"toBase64URI",noEnum(function(){return encode(this,true)}))}}if(global["Meteor"]){Base64=global.Base64}if(typeof module!=="undefined"&&module.exports){module.exports.Base64=global.Base64}else if(typeof define==="function"&&define.amd){define([],function(){return global.Base64})}return{Base64:global.Base64}});

window.Mobile = {};
(function (M) {
   'use strict';
   var _actualItem;

   function DeviceHandler (item) {
      this.device = item;
   };

   DeviceHandler.prototype.RequestLogs = function (onSuccess, onFailure) {
      $.ajax({
         url: '@Url.Action("GetLogFile", "Mobile")',
         type: 'POST',
         data: { DeviceID: this.device.DeviceID },
         success: onSuccess.bind(this),
         error: onFailure.bind(this)
      });
   };

   DeviceHandler.prototype.RequestDayLogs = function (date, onSuccess, onFailure) {
      $.ajax({
         url: '@Url.Action("GetLogFile", "Mobile")',
         type: 'POST',
         data: { DeviceID: this.device.DeviceID, Date: date.toISOString() },
         success: onSuccess.bind(this),
         error: onFailure.bind(this)
      });
   };

   DeviceHandler.prototype.SendDisconnect = function (onSuccess, onFailure) {
      $.ajax({
         url: '@Url.Action("SendDisconnect", "Mobile")',
         type: 'POST',
         data: { DeviceID: this.device.DeviceID },
         success: onSuccess.bind(this),
         error: onFailure.bind(this)
      });
   };

   DeviceHandler.prototype.SendCommunication = function (comm, onSuccess, onFailure) {
      comm["DeviceID"] = this.device.DeviceID;

      $.ajax({
         url: '@Url.Action("SendCommunication", "Mobile")',
         type: 'POST',
         data: comm,
         success: onSuccess.bind(this),
         error: onFailure.bind(this)
      });
   };

   DeviceHandler.prototype.DoSystemCheck = function (onSuccess, onFailure) {
      $.ajax({
         url: '@Url.Action("DoSystemCheck", "Mobile")',
         type: 'POST',
         data: { DeviceID: this.device.DeviceID },
         success: onSuccess.bind(this),
         error: onFailure.bind(this)
      });
    };

    DeviceHandler.prototype.DoSourceRef = function (onSuccess, onFailure) {
      $.ajax({
         url: '@Url.Action("DoSourceRef", "Mobile")',
         type: 'POST',
         data: { DeviceID: this.device.DeviceID },
         success: onSuccess.bind(this),
         error: onFailure.bind(this)
      });
   };


   function ConfigurationHandler (item) {
      this.device = item;
      if (item) {
         $("#save-conf").show();
      } else {
         $("#save-conf").hide();
      }
   };

   ConfigurationHandler.prototype.SendConfiguration = function (data, onSuccess, onFailure) {
      if (this.device != null) {
         data["DeviceID"] = this.device.DeviceID;
      }

      $.ajax({
         url: '@Url.Action("SendConfiguration", "Mobile")',
         type: 'POST',
         data: data,
         success: onSuccess.bind(this),
         error: onFailure.bind(this)
      });
   };

   ConfigurationHandler.prototype.GetConfiguration = function (onSuccess, onFailure) {
      $.ajax({
         url: '@Url.Action("GetConfiguration", "Mobile")',
         type: 'POST',
         data: { "DeviceID": this.device.DeviceID },
         success: onSuccess.bind(this),
         error: onFailure.bind(this)
      });
   };




   // Utils

   function ShowDialog(id, title, content) {
      if (title !== null || title !== undefined) {
         $('#' + id).data("kendoDialog").title(title);
      }
      if (content !== null || content !== undefined) {
         $('#' + id).data("kendoDialog").content(content);
      }
      $('#' + id).data("kendoDialog").open();
      return $('#' + id).data("kendoDialog");
   };

   function ShowQr(data) {
      $('#qr').data("kendoDialog").content('<div id="qrCode"></div>');
      $("#qrCode").kendoQRCode({
         size: 300,
         value: Base64.encode(data)
      });

      $('#qr').data("kendoDialog").open();
      return $('#qr').data("kendoDialog");
   };

   function CloseDialog(id) {
      $('#' + id).data("kendoDialog").close();
   };

   function RefreshGrid() {
      $('#monitor-grid').data('kendoGrid').dataSource.read();
   };

   function ShowProgress() {
      $('#progress').data("kendoDialog").open();
      var pb = $("#progressBar").data("kendoProgressBar");
      pb.value(false);
   };

   function HideProgress() {
      $('#progress').data("kendoDialog").close();
   };

   function ClearConfig() {
       $("#server_addr").val("");
     //  $('#server_port').val('');
      $("#server_port").data("kendoNumericTextBox").value("");
      $("#launcher").prop('checked', false);
   };

    M.onDataBound = function () {
      $(".k-grid-config").kendoTooltip({ content: "Configure", position: "top", width: "100px" });
      $(".k-grid-logs").kendoTooltip({ content: "Request logs", position: "top", width: "100px" });
      $(".k-grid-syscheck").kendoTooltip({ content: "System check", position: "top", width: "100px" });
      $(".k-grid-message").kendoTooltip({ content: "Send message", position: "top", width: "100px" });
      $(".k-grid-sourceref").kendoTooltip({ content: "Source Reference", position: "top", width: "100px" });
      $(".k-grid-disconnect").kendoTooltip({ content: "Disconnect", position: "top", width: "100px" });
   };

   // Request callbacks

    M.onLogRequest = function (_actualItemIn) {
        _actualItem = _actualItemIn;
      if (_actualItem.Online == false) {
         return;
      }

      ShowDialog("logs", "Request logs for " + _actualItem.DeviceID);
   };

    M.onSysCheck = function (_actualItemIn) {
        _actualItem = _actualItemIn;
      if (_actualItem.Online == false) {
         return;
      }

      ShowProgress();
      new DeviceHandler(_actualItem).DoSystemCheck(
         function (res) {
            ShowDialog("notification", '@DicSvc.XLate("Success")', this.device.DeviceID + " @DicSvc.XLate("Results:")<br>" + res.Info);
            HideProgress();
            RefreshGrid();
         }, function (res) {
            ShowDialog("notification", "Error", "System check request failed");
            HideProgress();
            RefreshGrid();
         }
      );
   };

    M.onSourceRefRequested = function (_actualItemIn) {
        _actualItem = _actualItemIn;
      if (_actualItem.Online == false) {
         return;
      }

      ShowProgress();
      new DeviceHandler(_actualItem).DoSourceRef(
         function (res) {
            ShowDialog("notification", '@DicSvc.XLate("Success")', this.device.DeviceID + " @DicSvc.XLate("Results:")<br>" + res.SourceReference);
            HideProgress();
            RefreshGrid();
         }, function (res) {
            ShowDialog("notification", "Error", "Source reference request failed");
            HideProgress();
            RefreshGrid();
         }
      );
   };


    M.onMessage = function (_actualItemIn) {
        _actualItem = _actualItemIn;
      if (_actualItem.Online == false) {
         return;
       }
       showSendMessageDialog("@DicSvc.XLate("Send message to device") " + _actualItem.DeviceID);
       $("#communication_title").val("");
       $("#communication_message").val("");
       $("#communication_action").val("")
   };

    M.onDisconnect = function (_actualItemIn) {
        _actualItem = _actualItemIn;
      if (_actualItem.Online == false) {
         return;
      }

      new DeviceHandler(_actualItem).SendDisconnect(
         function (res) {
            ShowDialog("notification", "Success", this.device.DeviceID + " disconnected");
            RefreshGrid();
         }, function (res) {
            ShowDialog("notification", "Error", "Disconnection request failed");
            RefreshGrid();
         }
      );
   };

   M.StartDeviceConfiguration = function (item) {
      ShowProgress();
      M.configurator = new ConfigurationHandler(item);
      if (item) {
         M.configurator.GetConfiguration(
            function (resp) {
               RefreshGrid();

               $("#server_addr").val(resp.ServerAddress);
                $("#server_port").data("kendoNumericTextBox").value(resp.ServerPort);
               // $('#server_port').val(resp.ServerPort);
               $("#launcher").prop('checked', resp.DigistatLauncher);

                HideProgress();
                showDeviceConfigDialog('@DicSvc.XLate("Configuration for device") ' + item.DeviceID);
               //ShowDialog("configuration", item ? "Configure " + item.DeviceID : "Configure devices");
            }, function (resp) {
               RefreshGrid();
               ClearConfig();
               HideProgress();
               //ShowDialog("configuration", item ? "Configure " + item.DeviceID : "Configure devices");
            });
      } else {
         ShowDialog("configuration", item ? "Configure ": "Configure devices");
      }
   };

   M.StartConfiguration = function () {
      ClearConfig();
       M.configurator = new ConfigurationHandler();
       showDeviceConfigDialog('');
      //ShowDialog("configuration", "Configure devices");
   };

   M.onConfigureRequested = function (item) {
      if (item.Online == false) {
         return;
      }

      M.StartDeviceConfiguration(item);
   };

   // Communications callback
   M.onCommunicationSend = function (sender) {
       try {
         var priority = $("#communication_priority").data("kendoComboBox").value();
         var title = $("#communication_title").val();
         var message = $("#communication_message").val();
         var action = $("#communication_action").val()

         if (!message) {
            ShowDialog("notification", "Error", "@DicSvc.XLate("Please insert a message", Digistat.FrameworkStd.Enums.StringParseMethod.Js)");
            return;
         }

         var c = {
            Title: title ? title : "",
            Message: message ? message : "",
            Action: action ? action : "",
            Priority: priority ? parseInt(priority) : 0
         };
         new DeviceHandler(_actualItem).SendCommunication(c,
             function (res) {
                 if (!res || res == '') {
                     res = '@DicSvc.XLate("Message sent")'
                 }
               ShowDialog("notification", "Success", res);
            }, function (res) {
               ShowDialog("notification", "Warning", res);
               RefreshGrid();
            }
         );
      } catch (e) {
         ShowDialog("notification", "Error", "Generic error");
      }
   };

   // Logs callback
   M.onLogsRequestAll = function (sender) {
      new DeviceHandler(_actualItem).RequestLogs(
         function (res) {
            $('#logs').data("kendoDialog").close();
            ShowDialog("notification", "Success", "Logs requested for device " + this.device.DeviceID);
         }, function (res) {
            $('#logs').data("kendoDialog").close();
            ShowDialog("notification", "Error", "Cannot request logs");
            RefreshGrid();
         }
      );
   };

   M.onLogsRequestDay = function (sender) {
      var date = $("#logs_date").data("kendoDatePicker").value();
      new DeviceHandler(_actualItem).RequestDayLogs(
         new Date(date),
         function (res) {
            $('#logs').data("kendoDialog").close();
            ShowDialog("notification", "Success", "Logs requested for device " + this.device.DeviceID);
         }, function (res) {
            $('#logs').data("kendoDialog").close();
            ShowDialog("notification", "Error", "Cannot request logs");
            RefreshGrid();
         }
      );
   };

   // Config
   M.onConfigurationSend = function () {
       closeDeviceConfigDialog();
      ShowProgress();

      var server = $("#server_addr").val();
      var port = $("#server_port").data("kendoNumericTextBox").value();
      var launcher = $("#launcher").is(":checked");

      var data = {
         "ServerAddress": server,
         "ServerPort": port,
         "DigistatLauncher": launcher
      };

      M.configurator.SendConfiguration(data,
         function (res) {
            ShowDialog("notification", "Success", this.device ? this.device.DeviceID + " configured" : "Devices configured");
            RefreshGrid();
            HideProgress();
         },
         function (res) {
            ShowDialog("notification", "Error", "Configuration failed");
            RefreshGrid();
            HideProgress();
         }
      );
   };

   M.onPropagateConfiguration = function () {
       closeDeviceConfigDialog();
      M.configurator.device = null;
      M.onConfigurationSend();
   };

   M.onQRConfiguration = function () {
      var server = $("#server_addr").val();
      var port = $("#server_port").data("kendoNumericTextBox").value();
      var launcher = $("#launcher").is(":checked");

      var config = {
         server_addr: server,
         server_port: port,
         launcher: launcher
      };
      ShowQr(JSON.stringify(config));
   };

   M.onQRDownload = function () {
      var qrCode = $("#qrCode").getKendoQRCode();
      qrCode.exportImage().done(function (data) {
         kendo.saveAs({
            dataURI: data,
            fileName: "QRCode.png"
         });
      });
   };

   $(document).ready(function () {
      $(".k-pager-configure").click(M.StartConfiguration);

      $.ajax({
         url: '@Url.Action("GetServerStatus", "Mobile")',
         type: 'POST',
         success: function (resp) {

         },
         error: function (resp) {
            ShowDialog("notification", "Error", "mobile server unavailable");
         }
      });
   });

})(window.Mobile);

</script>

<div class="h-100 text-center">
   <div class="card h-100 m-1 p-2 text-left resizeOffsetGrids">

      @(Html.Kendo().Grid<MobileDevice>()
                        .Name("monitor-grid")
                        .Columns(columns =>
                        {
                           columns.Bound(d => d.DeviceID);
                           columns.Bound(d => d.Online).ClientTemplateId("online_device_id").Width(40).Filterable(false).Title(" ");
                           columns.Bound(d => d.LastKeepAlive).Width(150);
                           columns.Bound(d => d.IP);
                           columns.Bound(d => d.User);
                           columns.Bound(d => d.AppVersion);
                           columns.Bound(d => d.AuthorizedApps);
                           columns.Bound(d => d.BedIDList);
                           columns.Bound(d => d.UniteCallID);
                           columns.Bound(x => x.DeviceID).ClientTemplateId("actionButtons")
                                  .Filterable(false).Width(250).Title(" ").HtmlAttributes(new {style="white-space: normal;"});

                        })
                        .ToolBar(toolbar =>
                        {
                           toolbar.ClientTemplateId("GridToolbarTemplateM");
                        })
                         //.Scrollable()
                         //.Resizable(resize => resize.Columns(true))
                         //.Sortable().Filterable().HtmlAttributes(new { style = "height:97%;margin:10px;" })
                         .UmsDefaultSettings(DicSvc)
                        .Pageable(pageable => pageable
                               .Input(false)
                               .Numeric(false)
                               .Info(false)
                               .PreviousNext(false)
                               .Refresh(true))
                        .Events(ev => ev.DataBound("Mobile.onDataBound"))
                        .LoaderType(GridLoaderType.LoadingPanel)
                        //.AutoBind(false)
                        .DataSource(dataSource => dataSource
                           .Ajax()

                           .Model(model =>
                           {
                              model.Id(o => o.DeviceID);
                              model.Field(o => o.Online).Editable(false);
                              model.Field(o => o.LastKeepAlive).Editable(false);
                              model.Field(o => o.IP).Editable(false);
                              model.Field(o => o.User).Editable(false);
                              model.Field(o => o.AppVersion).Editable(false);
                              model.Field(o => o.AuthorizedApps).Editable(false);
                              model.Field(o => o.BedIDList).Editable(false);
                              model.Field(o => o.UniteCallID).Editable(false);
                           })
                           .PageSize(1 << 16)
                           .Read(read => read.Action("GetDevices", "Mobile"))
                        ).HtmlAttributes(new {style= "max-height:800px;  min-width: 700px;" })

      )
      @(Html.Kendo().Dialog()
                        .Name("notification")
                        .Width(500)
                        .Modal(true)
                        .Visible(false)
                        .Actions(actions =>
                        {
                           actions.Add().Text("Ok").Action("").Primary(false);
                        })
      )
      @(Html.Kendo().Dialog()
                                .Name("logs")
                                .Width(400)
                                .Modal(true)
                                .Visible(false)
                                .Content(
                                   "<p>" +
                                   @Html.Kendo().DatePicker().Footer(false).DisableDates("function(d) { return d > new Date();}").Value(DateTime.Now).Name("logs_date").ToHtmlString() +
                                   @Html.Kendo().Button()
                                         .Name("logs-day").Tag("span").Events(ev => ev.Click("Mobile.onLogsRequestDay"))
                                         .Content("Day").ToHtmlString() +
                                   @Html.Kendo().Button()
                                         .Name("logs-all").Tag("span").Events(ev => ev.Click("Mobile.onLogsRequestAll"))
                                         .Content("All").ToHtmlString() +
                                   "</p>"
                                )
      )
      @(Html.Kendo().Dialog()
                                .Name("progress")
                                .Modal(true)
                                .Visible(false)
                                .Title("Waiting")
                                .Closable(false)
                                .Content(
                                   "<p style='text-align:center;font-weight: bold;'>...</p>" +
                                   @Html.Kendo().ProgressBar()
                                      .Name("progressBar")
                                      .Min(0)
                                      .Max(0)
                                      .Type(ProgressBarType.Value)
                                      .Animation(a => a.Duration(4000)).ToHtmlString()
                                )
      )
      @(Html.Kendo().Dialog()
                                .Name("qr")
                                .Width(420)
                                .Modal(true)
                                .Visible(false)
                                .Title(DicSvc.XLate("QR Configuration"))
                                .Actions(actions =>
                                {
                                   actions.Add().Text("Close").Primary(false);
                                   actions.Add().Text("Download").Action("Mobile.onQRDownload").Primary(false);
                                })
      )

   </div>
</div>
<div id="deviceConfigDialog">
   <div class="card" style="height:170px; padding: 15px 10px 0 10px;">
      <div class="row">
         <div class="col-md-4">
            @DicSvc.XLate("Server Address:")
         </div>
         <div class="col-md-8">
            @Html.Kendo().TextBox().Name("server_addr")
         </div>
      </div>
      <div class="row">
         <div class="col-md-4">
            @DicSvc.XLate("Server Port:")
         </div>
         <div class="col-md-8">
            @(Html.Kendo().NumericTextBox<int>().Min(0).Max(1 << 16).Format("#").Name("server_port"))
         </div>
      </div>
      <div class="row">
         <div class="col-md-4">
            @DicSvc.XLate("Enable Digistat Launcher:")
         </div>
         <div class="col-md-8">
            @Html.Kendo().CheckBox().Name("launcher")
         </div>
      </div>
   </div>
   <div class="card-footer h-10 p-0 m-0 border-0 bg-white">
      @(Html.Kendo().ToolBar()
                         .Name("toolBarDeviceConfig")
                         .UmsDefaultErrors(DicSvc, "errors")
                         .Items(
                             items =>
                             {

            items.Add().Type(CommandType.Button).Text(DicSvc.XLate("Apply to THIS device")).Id("save-conf").Click("Mobile.onConfigurationSend").UmsHtmlButtonGeneric("");
            items.Add().Type(CommandType.Button).Text(DicSvc.XLate("Apply to ALL devices")).Id("propagate-conf").Click("Mobile.onPropagateConfiguration").UmsHtmlButtonGeneric("");
            items.Add().Type(CommandType.Button).Text(DicSvc.XLate("Show QR Code")).Id("qr-conf").Click("Mobile.onQRConfiguration").UmsHtmlButtonGeneric("");
            items.Add().Type(CommandType.Button).Text(DicSvc.XLate("Close")).Id("btnCancel").Click("closeDeviceConfigDialog").UmsHtmlButtonGeneric("");
         }
                         )
      )
   </div>
</div>


<div id="deviceSendMessage">
   <div class="card" style="height:170px; padding: 15px 10px 0 10px;">
      <div class="row">
         <div class="col-md-4">
            @DicSvc.XLate("Title:")
         </div>
         <div class="col-md-8">
            @Html.Kendo().TextBox().Name("communication_title")
         </div>
      </div>
      <div class="row">
         <div class="col-md-4">
            @DicSvc.XLate("Message:")
         </div>
         <div class="col-md-8">
            @Html.Kendo().TextBox().Name("communication_message")
         </div>
      </div>
      <div class="row">
         <div class="col-md-4">
            @DicSvc.XLate("Action:")
         </div>
         <div class="col-md-8">
            @Html.Kendo().TextBox().Name("communication_action")
         </div>
      </div>
      <div class="row">
         <div class="col-md-4">
            @DicSvc.XLate("Priority:")
         </div>
         <div class="col-md-8">
            @Html.Kendo().ComboBox().Name("communication_priority").BindTo(new List<SelectListItem>() {
             new SelectListItem() {
            Text = "Default", Value = "0"
             },
             new SelectListItem() {
            Text = "Low", Value = "1"
             },
             new SelectListItem() {
            Text = "Normal", Value = "2"
             },
             new SelectListItem() {
            Text = "High", Value = "3"
             }
      }).SelectedIndex(3)
         </div>
      </div>
   </div>
   <div class="card-footer h-10 p-0 m-0 border-0 bg-white">
      @(Html.Kendo().ToolBar()
                                 .Name("toolBarSendMessage")
                                 .UmsDefaultErrors(DicSvc, "errors")
                                 .Items(
                                     items =>
                                     {

         items.Add().Type(CommandType.Button).Text(DicSvc.XLate("Send Message")).Id("MobileSendMsg").Click("Mobile.onCommunicationSend").UmsHtmlButtonGeneric("");
         items.Add().Type(CommandType.Button).Text(DicSvc.XLate("Close")).Id("btnCancel").Click("closeSendMessageDialog").UmsHtmlButtonGeneric("");
      }
                                 )
      )
   </div>
</div>

<script id="actionButtons" type="text/x-kendo-template">
   <a title='Configuration'    class='btn btnKendo mdi mdi-cog'             role='button' onclick='ButtonConfig("#=DeviceID#")'></a>
   <a title='Request logs'     class='btn btnKendo mdi mdi-file-document '  role='button' onclick='ButtonLogRequest("#=DeviceID#")'></a>
   <a title='System check'     class='btn btnKendo mdi mdi-check-bold    '  role='button' onclick='ButtonSysCheck("#=DeviceID#")'></a>
   <a title='Send message'     class='btn btnKendo mdi mdi-email         '  role='button' onclick='ButtonMessage("#=DeviceID#")'></a>
   <a title='Source reference' class='btn btnKendo mdi mdi-source-branch '  role='button' onclick='ButtonSourceRef("#=DeviceID#")'></a>
   <a title='Disconnect'       class='btn btnKendo mdi mdi-close-circle  '  role='button' onclick='ButtonDisconnect("#=DeviceID#")'></a>
</script>
<script id="GridToolbarTemplateM" type="text/x-kendo-template">
   <div class="refreshBtnContainer">
      <a href="\\#" class="k-button k-button-solid k-button-md k-button-rectangle k-rounded-md k-button-solid-base" title="@DicSvc.XLate("Configure")>"<span class="k-icon k-i-plus"></span>@DicSvc.XLate("CONFIGURE")</a>
   </div>
</script>

<script id="online_device_id" type="text/x-kendo-template">
   #if(Online == true){#
#if(IsAvailable == true){#
   <div align=center>
      @*<img src="/images/mobile_available.png" style="width: 24px; height: 24px; align-self:center" />*@
      <span class="mdi mdi-check-circle p-0 m-0 mdi-24px text-success" title="@DicSvc.XLate("Connected")"></span>
   </div>

   #}else{#
   <div align=center>
      <span class="mdi mdi-do-not-disturb p-0 m-0 mdi-24px text-warning" title="@DicSvc.XLate("Unvailable")"></span>
   </div>
   #}#
   #}else{#
   <div align=center>
      <span class="mdi mdi-close-circle p-0 m-0 mdi-24px text-danger" title="@DicSvc.XLate("Disconnected")"></span>
   </div>

   #}#
</script>

<script>
   function ButtonConfig(DeviceID) {
      var dataItem = $("#monitor-grid").data("kendoGrid").dataSource.get(DeviceID);
      Mobile.onConfigureRequested(dataItem);
   }

   function ButtonLogRequest(DeviceID) {
      var dataItem = $("#monitor-grid").data("kendoGrid").dataSource.get(DeviceID);
      Mobile.onLogRequest(dataItem);
   }

   function ButtonSysCheck(DeviceID) {
      var dataItem = $("#monitor-grid").data("kendoGrid").dataSource.get(DeviceID);
      Mobile.onSysCheck(dataItem);
   }

   function ButtonMessage(DeviceID) {
      var dataItem = $("#monitor-grid").data("kendoGrid").dataSource.get(DeviceID);
      Mobile.onMessage(dataItem);
   }

   function ButtonSourceRef(DeviceID) {
      var dataItem = $("#monitor-grid").data("kendoGrid").dataSource.get(DeviceID);
      Mobile.onSourceRefRequested(dataItem);
   }

   function ButtonDisconnect(DeviceID) {
      var dataItem = $("#monitor-grid").data("kendoGrid").dataSource.get(DeviceID);
      Mobile.onDisconnect(dataItem);
   }

   resizeGrid("monitor-grid");

</script>

