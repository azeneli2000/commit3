@model ConfiguratorWeb.App.Models.NetworkViewModel
@{
    Layout = null;
    string[] actions = new string[] { "Close" };
}


<style>
    .btn.border {
        padding: 1px 6px!important;
    }
</style>

<script>
    //$(function () {
    //    $("#set-location").ajaxStart(function () {
    //        kendo.ui.progress($("#NetworkEditWindow"), true);
    //    });


    //    $("#set-location").ajaxStop(function () {
    //        kendo.ui.progress($("#NetworkEditWindow"), false);
    //    });
    //});
   

    function openBedTelligence()
    {
        kendo.alert('@(DicSvc.XLate("Staff Station beds must be set using Integrations->Ascom Telligence-> Devices"))');
        return false;
    }



    function openBedSelection() {
        kendo.ui.progress($("#NetworkEditWindow"), true); // progess bar will intiate
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetBedsLocations", "Network", new { networkId=Model.Id })',
            data: JSON.stringify($("#linked-bed-grid").data().kendoGrid.dataSource.view()),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
              //  debugger;
                var wnd = kndWndBedDetails.data("kendoWindow");
                wnd.content('');
                wnd.content(data.content.Result);
                wnd.center().open();
            },
            error: function () {
            },
            complete: function () {
                kendo.ui.progress($("#NetworkEditWindow"), false);
            }
        });
    }

    function openLocations@(Model.Id)() {
        $.ajax({
            url: '@Url.Action("GetBedsLocations", "Network", new { networkId=Model.Id })',
            contentType: 'application/json; charset=utf-8',
            // dataType: 'json',
            type: 'POST',
            data:  JSON.stringify($("#linked-bed-grid").data().kendoGrid.dataSource.view()),//{ bedList: JSON.stringify($("#linked-bed-grid").data().kendoGrid.dataSource.view())} ,
           // data:  JSON.stringify($("#form_@Model.Id").find("#BedList").data().kendoGrid.dataSource.view()),//{ bedList: JSON.stringify($("#linked-bed-grid").data().kendoGrid.dataSource.view())} ,
                async: false

            }).done(function (data) {
                $('#locations_@Model.Id').data("kendoWindow").content(data);
                $('#locations_@Model.Id').data("kendoWindow").open().center();
                mergeGridRows("locationsbeds-grid", '@DicSvc.XLate("Default")');

                //set default location
                var locIdHidden = $("#DefaultLocation_ID_@Model.Id").val();
                $('input.check-col-def[ums-locId="' + locIdHidden + '"]').prop("checked", true);

                }).fail(function (jqXHR, exception) {
                    // Our error logic here
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                      //  debugger;
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    console.log(msg);
                });
    }


    function setDomainSelectionGrid() {
        var dtSource = $("#linked-bed-grid").data().kendoGrid.dataSource.view();
        //var dtSource = $("#form_@Model.Id").find("#BedList").data().kendoGrid.dataSource.view();
        for (var i = 0; i < dtSource.length; i++) {
            console.log(dtSource[i].BedCode);
        }
    }

     function onDataBoundBeds(arg) {
         mergeGridRows("linked-bed-gridTab", '@DicSvc.XLate("Location Name")');
    }

    function getLinkedBedsGridRowIndex(data) {
      return getGridRowIndex("#linked-bed-grid", data);
    }

     function getCurrentHostname() {
          $.ajax({
            url: '@Url.Action("GetCurrentWorkstationName", "Generic")',
            type: 'GET',
            async: false

          }).done(function (data) {
              $('#HostName').val(data);
        });
    }

    function openDefaultLocationGrid() {
        //debugger;
        var selLocID = $("#LocationID").val();
        $.ajax({
            url: '@Url.Action("GetLocations", "Network")',
            type: 'GET',
            data: { networkId: '@Model.Id', selectedLocID: selLocID },
            async: false

        }).done(function (data) {
            var dialog = $("#defaultLocationSelectionDialog").data("kendoWindow");
            dialog.title('@DicSvc.XLate("DEFAULT LOCATION SELECTION")');
            dialog.content(data);
            dialog.center().open();
        });
    }

    function removeDefaultLocation() {
        $('#DefaultLocation_LocationName').val('');
        $('#LocationID').val('');
    }

</script>

<div style="height:350px">
    <div style="width:40%; float:left;">
        <div style="float:left; width:93%">
            @(Html.Kendo().Grid<ConfiguratorWeb.App.Models.BedViewModel>(Model.BedList)
                                       .Name("linked-bed-gridTab").HtmlAttributes(new { @class = "no-hover" })
                                       .Events(ev => ev.DataBound("onDataBoundBeds"))
                                       .Columns(columns =>
                                       {
                                           columns.Bound(e => e.BedId).Hidden().ClientTemplate("#= BedId #" + "<input type='hidden' name='BedList[#= getLinkedBedsGridRowIndex(data)#].BedId' value='#= BedId #' />");
                                           columns.Bound(e => e.IdLocation).Hidden().ClientTemplate("#= IdLocation #" + "<input type='hidden' name='BedList[#= getLinkedBedsGridRowIndex(data)#].IdLocation' value='#= IdLocation #' />").Visible(false);
                                           columns.Bound(e => e.Location.LocationName).ClientTemplate("#= Location.LocationName #" + "<input type='hidden' name='BedList[#= getLinkedBedsGridRowIndex(data)#].Location.LocationName' value='#= Location.LocationName #' />").Title(DicSvc.XLate("Location Name"));
                                           columns.Bound(e => e.BedName).ClientTemplate("#= BedName #" + "<input type='hidden' name='BedList[#= getLinkedBedsGridRowIndex(data)#].BedName' value='#= BedName #' /><input type='hidden' name='BedList[#= getLinkedBedsGridRowIndex(data)#].BedIndex' value='#= BedIndex #' />").Title(DicSvc.XLate("Bed Name"));
                                           columns.Bound(e => e.BedIndex).Visible(false);
                                       })

                                       .HtmlAttributes(new { style = "height:250px;margin:10px;" })
                                       .Sortable(false)
                                       .Scrollable()
                                       .DataSource(dataSource => dataSource
                                       .Ajax()
                                       .Model(model =>
                                       {
                                           model.Id(p => p.BedId);
                                           model.Field(p => p.BedCode);
                                           model.Field(p => p.BedIndex);
                                           model.Field(p => p.BedLocation);
                                           model.Field(p => p.BedName);
                                           model.Field(p => p.Selected);
                                           model.Field(p => p.Location.LocationName);
                                           model.Field(p => p.Location.ID);
                                           model.Field(p => p.IdLocation);
                                           model.Field(p => p.PatientId);
                                           model.Field(p => p.RoomName);
                                       })
                                       .ServerOperation(false)
                                       ).NoRecords(x => x.Template("<div class='empty-grid'>" + DicSvc.XLate("No records found") + "</div>"))
            )
            <div class="row" style="padding-top: 5px;">
                <div class="col-md-2 u-col-h-fixed">
                    @Html.Label("Default location")
                </div>
                <div class="col-sm-10 u-col-h-fixed">
                    <div class="input-group">
                        <input asp-for="LocationID" type="hidden" readonly="readonly" class="k-input k-textbox form-control control-required" />
                        <input asp-for="DefaultLocation.LocationName" readonly="readonly" class="form-control control-required" id="DefaultLocation_LocationName" />
                        <div class="input-group-append">
                            <button id="btnDefaultLoc" onclick="openDefaultLocationGrid();" class="btn border" type="button" data-toggle="tooltip" data-placement="top" title="@DicSvc.XLate("Set Default Location")">
                                <span class="mdi mdi-18px mdi-pencil"></span>
                            </button>
                            <button id="btnDefaultLocRemove" onclick="removeDefaultLocation();" class="btn border" type="button" data-toggle="tooltip" data-placement="top" title="@DicSvc.XLate("Remove Default Location")">
                                <span class="mdi mdi-18px mdi-window-close "></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div style="float:left; width:3%;padding-top: 10px;">
           <span class="input-group-btn">
              @if (Model.Type != Digistat.FrameworkStd.Enums.NetworkTypeEnum.TelligenceSS)
              {
                 <button id="set-location" onclick="openBedSelection();" class="btn btn-default" type="button" data-toggle="tooltip" data-placement="top" title="@DicSvc.XLate("Set beds")"><span class="mdi mdi-bed-empty mdi-24px"></span></button>
              }
              else
              {
                 <button id="set-location" onclick="openBedTelligence();" class="btn btn-default" type="button" data-toggle="tooltip" data-placement="top" title="@DicSvc.XLate("Set beds")"><span class="mdi mdi-bed-empty mdi-24px"></span></button>
              }
           </span>
           <img src="~/fonts/telligence.svg" width="18" height="18" />
        </div>
    </div>


</div>


